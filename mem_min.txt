#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 100

typedef struct {
    int id;
    int memory;
} Process;

void allocateFrames(int totalMemorySize, int numberOfProcesses, Process processes[], int frameSize) {
    int totalFrames = totalMemorySize / frameSize;
    int allocatedFrames = 0;
    int allocationTable[totalFrames];

    for (int i = 0; i < totalFrames; i++) {
        allocationTable[i] = -1; // -1 indicates free frame
    }

    for (int i = 0; i < numberOfProcesses - 1; i++) {
        for (int j = 0; j < numberOfProcesses - i - 1; j++) {
            if (processes[j].memory > processes[j + 1].memory) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    for (int i = 0; i < numberOfProcesses; i++) {
        int requiredFrames = processes[i].memory / frameSize;
        if (allocatedFrames + requiredFrames > totalFrames) {
            break;
        }
        for (int j = 0; j < requiredFrames; j++) {
            allocationTable[allocatedFrames + j] = processes[i].id;
        }
        allocatedFrames += requiredFrames;
    }

    printf("Memory Allocation Table:\n");
    for (int i = 0; i < totalFrames; i++) {
        if (allocationTable[i] == -1) {
            printf("Frame %d: Free\n", i);
        } else {
            printf("Frame %d: Process %d\n", i, allocationTable[i]);
        }
    }
}

int main() {
    int totalMemorySize = 1024; // in KB
    int numberOfProcesses = 3;
    Process processes[MAX_PROCESSES] = {
        {1, 400}, // Process 1: 400 KB
        {2, 200}, // Process 2: 200 KB
        {3, 300}  // Process 3: 300 KB
    };
    int frameSize = 100; // in KB
    allocateFrames(totalMemorySize, numberOfProcesses, processes, frameSize);
    return 0;
}